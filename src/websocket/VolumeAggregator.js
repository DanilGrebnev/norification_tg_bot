/**
 * –ö–ª–∞—Å—Å –¥–ª—è –∞–≥—Ä–µ–≥–∞—Ü–∏–∏ –æ–±—ä–µ–º–æ–≤ —Ç–æ—Ä–≥–æ–≤ –ø–æ –≤—Å–µ–º –±–∏—Ä–∂–∞–º.
 * –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ—Ç –æ–±—ä–µ–º—ã –ø–æ–∫—É–ø–æ–∫ –∏ –ø—Ä–æ–¥–∞–∂ –∑–∞ 30-—Å–µ–∫—É–Ω–¥–Ω—ã–µ –∏–Ω—Ç–µ—Ä–≤–∞–ª—ã.
 */
export default class VolumeAggregator {
    constructor(exchanges = []) {
        this.exchanges = exchanges
        this.intervalDuration = 30000 // 30 —Å–µ–∫—É–Ω–¥ –≤ –º–∏–ª–ª–∏—Å–µ–∫—É–Ω–¥–∞—Ö
        this.intervalTimer = null
        this.isRunning = false
        this.currentIntervalStart = null

        // –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –∏–Ω—Ç–µ—Ä–≤–∞–ª–∞–º
        this.intervalHistory = []
        this.maxHistoryLength = 10 // –•—Ä–∞–Ω–∏–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ 10 –∏–Ω—Ç–µ—Ä–≤–∞–ª–æ–≤

        // –ò—Å—Ç–æ—Ä–∏—è –ø–æ –∫–∞–∂–¥–æ–π –±–∏—Ä–∂–µ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –ø–æ—Å–ª–µ–¥–Ω–∏—Ö 6 –∏–Ω—Ç–µ—Ä–≤–∞–ª–æ–≤
        // Map<exchangeName, Array<{ time:number, buy:number, sell:number }>>
        this.historyByExchange = new Map()

        // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –±—É—Ñ–µ—Ä—ã –∏—Å—Ç–æ—Ä–∏–∏ –¥–ª—è –≤—Å–µ—Ö –±–∏—Ä–∂
        this.exchanges.forEach((exchange) => {
            this.historyByExchange.set(exchange.exchangeName, [])
        })

        // –ì–ª–æ–±–∞–ª—å–Ω–∞—è –∏—Å—Ç–æ—Ä–∏—è (–∞–≥—Ä–µ–≥–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –ø–æ –≤—Å–µ–º –±–∏—Ä–∂–∞–º) –¥–ª—è 6 –∏–Ω—Ç–µ—Ä–≤–∞–ª–æ–≤
        // Array<{ time:number, buy:number, sell:number }>
        this.globalHistory = []
    }

    /** –ó–∞–ø—É—Å–∫ —Å–∏—Å—Ç–µ–º—ã –∞–≥—Ä–µ–≥–∞—Ü–∏–∏ –æ–±—ä–µ–º–æ–≤ */
    start() {
        if (this.isRunning) {
            console.log('‚ö†Ô∏è VolumeAggregator —É–∂–µ –∑–∞–ø—É—â–µ–Ω')
            return
        }

        this.isRunning = true
        this.startNewInterval()

        console.log('üìä –°–∏—Å—Ç–µ–º–∞ —Ä–∞—Å—á–µ—Ç–∞ –æ–±—ä–µ–º–æ–≤ –∑–∞–ø—É—â–µ–Ω–∞')
        console.log(
            `‚è±Ô∏è –ò–Ω—Ç–µ—Ä–≤–∞–ª —Ä–∞—Å—á–µ—Ç–∞: ${this.intervalDuration / 1000} —Å–µ–∫—É–Ω–¥`,
        )
    }

    /** –û—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å–∏—Å—Ç–µ–º—ã –∞–≥—Ä–µ–≥–∞—Ü–∏–∏ –æ–±—ä–µ–º–æ–≤ */
    stop() {
        if (this.intervalTimer) {
            clearTimeout(this.intervalTimer)
            this.intervalTimer = null
        }
        this.isRunning = false
        console.log('üõë –°–∏—Å—Ç–µ–º–∞ —Ä–∞—Å—á–µ—Ç–∞ –æ–±—ä–µ–º–æ–≤ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞')
    }

    /** –ù–∞—á–∞–ª–æ –Ω–æ–≤–æ–≥–æ –∏–Ω—Ç–µ—Ä–≤–∞–ª–∞ —Ä–∞—Å—á–µ—Ç–∞ */
    startNewInterval() {
        const now = Date.now()

        // –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –≤—Ä–µ–º—è –Ω–∞—á–∞–ª–∞ —Å–ª–µ–¥—É—é—â–µ–≥–æ –∏–Ω—Ç–µ—Ä–≤–∞–ª–∞
        // –ù–∞–ø—Ä–∏–º–µ—Ä, –µ—Å–ª–∏ —Å–µ–π—á–∞—Å 14:30:15, —Ç–æ —Å–ª–µ–¥—É—é—â–∏–π –∏–Ω—Ç–µ—Ä–≤–∞–ª –Ω–∞—á–Ω–µ—Ç—Å—è –≤ 14:30:30
        const secondsInCurrentMinute = Math.floor((now / 1000) % 60)
        const secondsToNext30 =
            secondsInCurrentMinute < 30
                ? 30 - secondsInCurrentMinute
                : 60 - secondsInCurrentMinute
        const nextIntervalStart = now + secondsToNext30 * 1000

        this.currentIntervalStart = nextIntervalStart

        // –°–±—Ä–∞—Å—ã–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ –æ–±—ä–µ–º–∞–º —É –≤—Å–µ—Ö –±–∏—Ä–∂
        this.exchanges.forEach((exchange) => {
            exchange.startNewInterval()
        })

        // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–∞–π–º–µ—Ä –Ω–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ –∏–Ω—Ç–µ—Ä–≤–∞–ª–∞
        const timeToWait = nextIntervalStart - now
        this.intervalTimer = setTimeout(() => {
            this.completeInterval()
        }, timeToWait)

        const startTime = new Date(nextIntervalStart).toLocaleTimeString(
            'ru-RU',
        )
        console.log(`üîÑ –ù–æ–≤—ã–π –∏–Ω—Ç–µ—Ä–≤–∞–ª –Ω–∞—á–Ω–µ—Ç—Å—è –≤ ${startTime}`)
    }

    /** –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–≥–æ –∏–Ω—Ç–µ—Ä–≤–∞–ª–∞ –∏ –≤—ã–≤–æ–¥ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ */
    completeInterval() {
        // –ö–æ–Ω–µ—Ü —Ç–µ–∫—É—â–µ–≥–æ –∏–Ω—Ç–µ—Ä–≤–∞–ª–∞ —Å–æ–≤–ø–∞–¥–∞–µ—Ç —Å —Ä–∞—Å—Å—á–∏—Ç–∞–Ω–Ω—ã–º nextIntervalStart
        const intervalEnd = this.currentIntervalStart
        const intervalData = this.collectIntervalData(intervalEnd)

        // –û–±–Ω–æ–≤–ª—è–µ–º –∏—Å—Ç–æ—Ä–∏—é –¥–ª—è –∫–∞–∂–¥–æ–π –±–∏—Ä–∂–∏ (–±—É—Ñ–µ—Ä –∏–∑ 6 —ç–ª–µ–º–µ–Ω—Ç–æ–≤)
        this.exchanges.forEach((exchange) => {
            const vd = exchange.getVolumeData()
            const snapshot = {
                time: intervalEnd,
                buy: vd.buyVolume,
                sell: vd.sellVolume,
            }
            const list = this.historyByExchange.get(exchange.exchangeName) || []
            list.push(snapshot)
            while (list.length > 6) list.shift()
            this.historyByExchange.set(exchange.exchangeName, list)
        })

        // –û–±–Ω–æ–≤–ª—è–µ–º –≥–ª–æ–±–∞–ª—å–Ω—É—é –∏—Å—Ç–æ—Ä–∏—é (—Å—É–º–º–∞—Ä–Ω—ã–µ –ø–æ–∫—É–ø–∫–∏/–ø—Ä–æ–¥–∞–∂–∏ –ø–æ –≤—Å–µ–º –±–∏—Ä–∂–∞–º)
        const globalSnap = {
            time: intervalEnd,
            buy: intervalData.totals.buyVolume,
            sell: intervalData.totals.sellVolume,
        }
        this.globalHistory.push(globalSnap)
        while (this.globalHistory.length > 6) this.globalHistory.shift()

        // –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –∏–Ω—Ç–µ—Ä–≤–∞–ª–∞ –≤ –∏—Å—Ç–æ—Ä–∏—é
        this.intervalHistory.push(intervalData)
        if (this.intervalHistory.length > this.maxHistoryLength) {
            this.intervalHistory.shift()
        }

        // –í—ã–≤–æ–¥–∏–º –µ–¥–∏–Ω—É—é –∞–≥—Ä–µ–≥–∏—Ä–æ–≤–∞–Ω–Ω—É—é —Ç–∞–±–ª–∏—Ü—É
        this.displayGlobalTable()

        // –ó–∞–ø—É—Å–∫–∞–µ–º —Å–ª–µ–¥—É—é—â–∏–π –∏–Ω—Ç–µ—Ä–≤–∞–ª
        if (this.isRunning) {
            this.startNewInterval()
        }
    }

    /** –°–±–æ—Ä –¥–∞–Ω–Ω—ã—Ö –ø–æ –≤—Å–µ–º –±–∏—Ä–∂–∞–º –∑–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã–π –∏–Ω—Ç–µ—Ä–≤–∞–ª */
    collectIntervalData(intervalEnd) {
        const intervalData = {
            startTime: this.currentIntervalStart,
            endTime: intervalEnd,
            duration: intervalEnd - this.currentIntervalStart,
            exchanges: [],
            totals: {
                buyVolume: 0,
                sellVolume: 0,
                totalVolume: 0,
                lastPrice: 0,
                connectedExchanges: 0,
            },
        }

        this.exchanges.forEach((exchange) => {
            const volumeData = exchange.getVolumeData()
            intervalData.exchanges.push(volumeData)

            // –°—É–º–º–∏—Ä—É–µ–º –æ–±—â–∏–µ –æ–±—ä–µ–º—ã —Ç–æ–ª—å–∫–æ –æ—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–Ω—ã—Ö –±–∏—Ä–∂
            if (volumeData.connectionStatus === 'connected') {
                intervalData.totals.buyVolume += volumeData.buyVolume
                intervalData.totals.sellVolume += volumeData.sellVolume
                intervalData.totals.totalVolume += volumeData.totalVolume
                intervalData.totals.connectedExchanges++

                // –ë–µ—Ä–µ–º –ø–æ—Å–ª–µ–¥–Ω—é—é —Ü–µ–Ω—É –æ—Ç –ª—é–±–æ–π –ø–æ–¥–∫–ª—é—á–µ–Ω–Ω–æ–π –±–∏—Ä–∂–∏
                if (volumeData.lastPrice > 0) {
                    intervalData.totals.lastPrice = volumeData.lastPrice
                }
            }
        })

        return intervalData
    }

    /** –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Ç–∞–±–ª–∏—Ü –ø–æ –∫–∞–∂–¥–æ–π –±–∏—Ä–∂–µ –≤ —Ç—Ä–µ–±—É–µ–º–æ–º —Ñ–æ—Ä–º–∞—Ç–µ */
    displayGlobalTable() {
        const indexes = ['-5', '-4', '-3', '-2', '-1', '–¢–µ–∫—É—â–∏–π']

        // –ë–µ—Ä–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ 6 –∏–Ω—Ç–µ—Ä–≤–∞–ª–æ–≤ –≥–ª–æ–±–∞–ª—å–Ω–æ–π –∏—Å—Ç–æ—Ä–∏–∏
        const lastSix = Array(6).fill(null)
        const recent = this.globalHistory.slice(-6)
        for (let i = 0; i < recent.length; i++) {
            lastSix[6 - recent.length + i] = recent[i]
        }

        // –§–æ—Ä–º–∏—Ä—É–µ–º —Å—Ç—Ä–æ–∫–∏
        const colors = lastSix.map((s) =>
            s ? this.getVolumeColor(s.buy, s.sell) : '',
        )
        const times = lastSix.map((s) =>
            s ? new Date(s.time).toISOString().substring(11, 19) : '',
        )
        const buys = lastSix.map((s) => (s ? this.formatMoney(s.buy) : ''))
        const sells = lastSix.map((s) => (s ? this.formatMoney(s.sell) : ''))

        // –í—ã–≤–æ–¥ —á–µ—Ä–µ–∑ console.table
        const makeRow = (label, arr) => {
            const row = { '(index)': label }
            indexes.forEach((key, i) => {
                row[key] = arr[i] ?? ''
            })
            return row
        }

        const tableData = [
            makeRow('–¶–≤–µ—Ç', colors),
            makeRow('–í—Ä–µ–º—è UTC', times),
            makeRow('–ü–æ–∫—É–ø–∫–∏ ($)', buys),
            makeRow('–ü—Ä–æ–¥–∞–∂–∏ ($)', sells),
        ]

        console.log('\n' + '='.repeat(100))
        console.log('üìä –û–ë–©–ò–ô –û–ë–™–ï–ú –¢–û–†–ì–û–í (30—Å) ‚Äî –∞–≥—Ä–µ–≥–∏—Ä–æ–≤–∞–Ω–æ –ø–æ –≤—Å–µ–º –±–∏—Ä–∂–∞–º')
        console.table(tableData)
        console.log('='.repeat(100) + '\n')
    }

    /**
     * –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–µ–Ω–µ–∂–Ω—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π: —Ç—ã—Å—è—á–∏ —á–µ—Ä–µ–∑ —Ç–æ—á–∫—É, 2 –∑–Ω–∞–∫–∞ –ø–æ—Å–ª–µ –∑–∞–ø—è—Ç–æ–π.
     * –ü—Ä–∏–º–µ—Ä: 1234567.8 -> 1.234.567,80
     */
    formatMoney(value) {
        try {
            return new Intl.NumberFormat('de-DE', {
                minimumFractionDigits: 2,
                maximumFractionDigits: 2,
            }).format(value)
        } catch (e) {
            return String(value)
        }
    }

    /** –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ü–≤–µ—Ç–∞ –æ–±—ä–µ–º–Ω–æ–≥–æ –±–∞—Ä–∞ */
    getVolumeColor(buyVolume, sellVolume) {
        if (buyVolume > sellVolume) {
            return 'üü¢' // –ó–µ–ª–µ–Ω—ã–π - –ø–æ–∫—É–ø–æ–∫ –±–æ–ª—å—à–µ
        } else if (sellVolume > buyVolume) {
            return 'üî¥' // –ö—Ä–∞—Å–Ω—ã–π - –ø—Ä–æ–¥–∞–∂ –±–æ–ª—å—à–µ
        } else {
            return 'üî¥' // –ö—Ä–∞—Å–Ω—ã–π –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –ø—Ä–∏ —Ä–∞–≤–µ–Ω—Å—Ç–≤–µ
        }
    }
}
