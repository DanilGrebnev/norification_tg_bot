import WebSocket from 'ws'

/**
 * –ö–ª–∞—Å—Å-–æ–±—ë—Ä—Ç–∫–∞ –Ω–∞–¥ –Ω–∞—Ç–∏–≤–Ω—ã–º WebSocket
 */
export default class WS {
    constructor(connections) {
        this.connections = connections
        this.sockets = []
        this.connectionPromise = null

        // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —ç–∫–∑–µ–º–ø–ª—è—Ä–∞
        this.connectionPromise = this.init()
    }

    /**
     * –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫–æ –≤—Å–µ–º WebSocket —Å–µ—Ä–≤–µ—Ä–∞–º
     */
    async init() {
        const connectPromises = this.connections.map((config, index) =>
            this.connectSingle(config, index),
        )

        try {
            await Promise.all(connectPromises)
            console.log('‚úÖ –í—Å–µ WebSocket –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã')
            return true
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è WebSocket:', error)
            throw error // –ü—Ä–æ–±—Ä–∞—Å—ã–≤–∞–µ–º –æ—à–∏–±–∫—É –¥–∞–ª—å—à–µ
        }
    }

    /**
     * –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –æ–¥–Ω–æ–º—É WebSocket —Å–µ—Ä–≤–µ—Ä—É
     */
    connectSingle(config, index) {
        return new Promise((resolve, reject) => {
            try {
                console.log(`[WebSocket ${index}] –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫:`, config.route)

                const socket = new WebSocket(config.route, {
                    headers: config.headers || {},
                })

                // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —É—Å–ø–µ—à–Ω–æ–≥–æ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
                socket.on('open', () => {
                    console.log(
                        `[WebSocket ${index}] ‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ`,
                    )

                    // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–¥–ø–∏—Å–∫–∏ –µ—Å–ª–∏ –æ–Ω–∏ –µ—Å—Ç—å
                    if (
                        config.subscriptions &&
                        Array.isArray(config.subscriptions)
                    ) {
                        setTimeout(() => {
                            config.subscriptions.forEach((subscription) => {
                                socket.send(JSON.stringify(subscription))
                                console.log(
                                    `[WebSocket ${index}] üì° –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –ø–æ–¥–ø–∏—Å–∫–∞:`,
                                    subscription,
                                )
                            })
                        }, 1000)
                    }

                    resolve()
                })

                // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫
                socket.on('error', (error) => {
                    console.error(`[WebSocket ${index}] ‚ùå –û—à–∏–±–∫–∞:`, error)
                    reject(error)
                })

                // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—Ç–∫–ª—é—á–µ–Ω–∏—è
                socket.on('close', (code, reason) => {
                    console.log(
                        `[WebSocket ${index}] ‚ö†Ô∏è –°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –∑–∞–∫—Ä—ã—Ç–æ:`,
                        code,
                        reason.toString(),
                    )
                })

                // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—Ö–æ–¥—è—â–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
                socket.on('message', (data) => {
                    try {
                        const parsedData = JSON.parse(data.toString())

                        // –í—ã–∑—ã–≤–∞–µ–º –≤—Å–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è —ç—Ç–æ–≥–æ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
                        if (
                            config.onMessage &&
                            Array.isArray(config.onMessage)
                        ) {
                            config.onMessage.forEach((handler) => {
                                if (typeof handler === 'function') {
                                    handler(parsedData)
                                }
                            })
                        }
                    } catch (error) {
                        console.error(
                            `[WebSocket ${index}] –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞:`,
                            error,
                        )
                    }
                })

                // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ–∫–µ—Ç
                this.sockets[index] = socket
            } catch (error) {
                console.error(`[WebSocket ${index}] –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è:`, error)
                reject(error)
            }
        })
    }

    /**
     * –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ
     */
    send(connectionIndex, data) {
        const socket = this.sockets[connectionIndex]
        if (socket && socket.readyState === WebSocket.OPEN) {
            socket.send(JSON.stringify(data))
        } else {
            console.warn(
                `[WebSocket ${connectionIndex}] –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –Ω–µ –∞–∫—Ç–∏–≤–Ω–æ`,
            )
        }
    }

    /**
     * –ó–∞–∫—Ä—ã—Ç–∏–µ –≤—Å–µ—Ö –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–π
     */
    closeAll() {
        this.sockets.forEach((socket, index) => {
            if (socket) {
                console.log(`[WebSocket ${index}] –ó–∞–∫—Ä—ã—Ç–∏–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è`)
                socket.close()
            }
        })
        this.sockets = []
    }

    /**
     * –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –≤—Å–µ—Ö –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–π
     */
    getStatus() {
        return this.sockets.map((socket, index) => ({
            index,
            route: this.connections[index]?.route,
            connected: socket?.readyState === WebSocket.OPEN,
        }))
    }

    /**
     * –û–∂–∏–¥–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
     * –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø—Ä–æ–º–∏—Å, –∫–æ—Ç–æ—Ä—ã–π resolve –ø—Ä–∏ —É—Å–ø–µ—Ö–µ –∏–ª–∏ reject –ø—Ä–∏ –æ—à–∏–±–∫–µ
     */
    waitForConnection() {
        return this.connectionPromise
    }
}
