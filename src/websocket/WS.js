import WebSocket from 'ws'

/** –ö–ª–∞—Å—Å-–æ–±—ë—Ä—Ç–∫–∞ –Ω–∞–¥ –Ω–∞—Ç–∏–≤–Ω—ã–º WebSocket */
export default class WS {
    constructor(connections) {
        this.connections = connections
        this.sockets = []
        this.connectionPromise = null

        // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —ç–∫–∑–µ–º–ø–ª—è—Ä–∞
        this.connectionPromise = this.init()
    }

    /** –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫–æ –≤—Å–µ–º WebSocket —Å–µ—Ä–≤–µ—Ä–∞–º */
    async init() {
        const connectPromises = this.connections.map((config, index) =>
            this.connectSingle(config, index).catch((error) => {
                const exchangeName = config.exchangeName || `WebSocket ${index}`
                console.error(
                    `[${exchangeName}] –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –∏–∑-–∑–∞ –æ—à–∏–±–∫–∏:`,
                    error.message,
                )
                return null // –í–æ–∑–≤—Ä–∞—â–∞–µ–º null –≤–º–µ—Å—Ç–æ –æ—à–∏–±–∫–∏
            }),
        )

        try {
            const results = await Promise.all(connectPromises)
            const successfulConnections = results.filter(
                (result) => result !== null,
            ).length
            const totalConnections = this.connections.length

            console.log(
                `‚úÖ WebSocket –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è: ${successfulConnections}/${totalConnections} —É—Å–ø–µ—à–Ω–æ`,
            )
            return true
        } catch (error) {
            console.error('‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ WebSocket:', error)
            throw error
        }
    }

    /** –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –æ–¥–Ω–æ–º—É WebSocket —Å–µ—Ä–≤–µ—Ä—É */
    connectSingle(config, index) {
        return new Promise((resolve, reject) => {
            const exchangeName = config.exchangeName || `WebSocket ${index}`

            const attempt = (retriesLeft = 5, attemptIndex = 1) => {
                try {
                    console.log(
                        `[${exchangeName}] –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫:`,
                        config.route,
                    )

                    const socket = new WebSocket(config.route, {
                        headers: config.headers || {},
                    })

                    let opened = false

                    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —É—Å–ø–µ—à–Ω–æ–≥–æ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
                    socket.on('open', () => {
                        opened = true

                        // –í—ã–∑—ã–≤–∞–µ–º –∫–æ–ª–±—ç–∫ onConnect –µ—Å–ª–∏ –æ–Ω –µ—Å—Ç—å
                        if (
                            config.onConnect &&
                            typeof config.onConnect === 'function'
                        ) {
                            config.onConnect()
                        }

                        // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–¥–ø–∏—Å–∫–∏ –µ—Å–ª–∏ –æ–Ω–∏ –µ—Å—Ç—å
                        if (
                            config.subscriptions &&
                            Array.isArray(config.subscriptions)
                        ) {
                            setTimeout(() => {
                                config.subscriptions.forEach((subscription) => {
                                    socket.send(JSON.stringify(subscription))
                                })
                            }, 1000)
                        }

                        resolve()
                    })

                    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫
                    socket.on('error', (error) => {
                        console.error(`[${exchangeName}] ‚ùå –û—à–∏–±–∫–∞:`, error)

                        // –í—ã–∑—ã–≤–∞–µ–º –∫–æ–ª–±—ç–∫ onError –µ—Å–ª–∏ –æ–Ω –µ—Å—Ç—å
                        if (
                            config.onError &&
                            typeof config.onError === 'function'
                        ) {
                            config.onError(error)
                        }

                        // –ü–æ–≤—Ç–æ—Ä–Ω–∞—è –ø–æ–ø—ã—Ç–∫–∞, –µ—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–∫—Ä—ã—Ç—å —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ
                        if (!opened && retriesLeft > 0) {
                            const delay = attemptIndex * 5000
                            console.warn(
                                `[${exchangeName}] –ü–æ–≤—Ç–æ—Ä–Ω–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —á–µ—Ä–µ–∑ ${delay}–º—Å...`,
                            )
                            setTimeout(
                                () =>
                                    attempt(retriesLeft - 1, attemptIndex + 1),
                                delay,
                            )
                            return
                        }

                        reject(error)
                    })

                    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—Ç–∫–ª—é—á–µ–Ω–∏—è
                    socket.on('close', (code, reason) => {
                        console.log(
                            `[${exchangeName}] ‚ö†Ô∏è –°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –∑–∞–∫—Ä—ã—Ç–æ:`,
                            code,
                            reason.toString(),
                        )

                        // –í—ã–∑–≤–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∑–∞–∫—Ä—ã—Ç–∏—è, –µ—Å–ª–∏ –æ–Ω –æ–ø—Ä–µ–¥–µ–ª–µ–Ω
                        if (
                            config.onClose &&
                            typeof config.onClose === 'function'
                        ) {
                            config.onClose()
                        }

                        // –ê–≤—Ç–æ–ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —Å –Ω–µ–±–æ–ª—å—à–æ–π –∑–∞–¥–µ—Ä–∂–∫–æ–π
                        const delay = 1000
                        console.log(
                            `[${exchangeName}] üîÅ –ü–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —á–µ—Ä–µ–∑ ${delay}–º—Å...`,
                        )
                        setTimeout(() => {
                            this.connectSingle(config, index).catch(() => {})
                        }, delay)
                    })

                    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—Ö–æ–¥—è—â–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
                    socket.on('message', (data) => {
                        try {
                            const parsedData = JSON.parse(data.toString())

                            // –í—ã–∑—ã–≤–∞–µ–º –≤—Å–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è —ç—Ç–æ–≥–æ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
                            if (
                                config.onMessage &&
                                Array.isArray(config.onMessage)
                            ) {
                                config.onMessage.forEach((handler) => {
                                    if (typeof handler === 'function') {
                                        handler(parsedData)
                                    }
                                })
                            }
                        } catch (error) {
                            console.error(
                                `[${exchangeName}] –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞:`,
                                error,
                            )
                        }
                    })

                    // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ–∫–µ—Ç
                    this.sockets[index] = socket
                } catch (error) {
                    console.error(`[${exchangeName}] –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è:`, error)

                    if (retriesLeft > 0) {
                        const delay = attemptIndex * 5000
                        console.warn(
                            `[${exchangeName}] –ü–æ–≤—Ç–æ—Ä–Ω–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —á–µ—Ä–µ–∑ ${delay}–º—Å...`,
                        )
                        setTimeout(
                            () => attempt(retriesLeft - 1, attemptIndex + 1),
                            delay,
                        )
                    } else {
                        reject(error)
                    }
                }
            }

            attempt(5, 1)
        })
    }

    /**
     * –û–∂–∏–¥–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è.
     * –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø—Ä–æ–º–∏—Å, –∫–æ—Ç–æ—Ä—ã–π resolve –ø—Ä–∏ —É—Å–ø–µ—Ö–µ –∏–ª–∏ reject –ø—Ä–∏ –æ—à–∏–±–∫–µ.
     */
    waitForConnection() {
        return this.connectionPromise
    }
}
