import VolumeAnalyzer from '../analysis/VolumeAnalyzer.js'

/**
 * –ö–ª–∞—Å—Å –¥–ª—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ —Ç—Ä—ë–º –±–∏—Ä–∂–∞–º –ø–æ WebSocket
 */
export default class MultiExchangeAggregator {
    constructor() {
        this.volumeAnalyzer = new VolumeAnalyzer()
        this.exchanges = {
            binance: {
                ws: null,
                url: 'wss://stream.binance.com:9443/ws/btcusdt@trade',
                data: { price: 0, volume: 0, timestamp: 0 },
            },
            bybit: {
                ws: null,
                url: 'wss://stream.bybit.com/v5/public/spot',
                data: { price: 0, volume: 0, timestamp: 0 },
            },
            coinbase: {
                ws: null,
                url: 'wss://ws-feed.pro.coinbase.com',
                data: { price: 0, volume: 0, timestamp: 0 },
            },
        }

        this.candleData = {
            open: null,
            high: 0,
            low: Infinity,
            close: 0,
            volume: 0,
            timestamp: null,
            interval: 60000, // 1 –º–∏–Ω—É—Ç–∞
        }

        this.trades = []
        this.connectionStatus = {
            binance: false,
            bybit: false,
            coinbase: false,
        }
        this.allConnectionsReady = false
    }

    /**
     * –ü–æ–ª—É—á–µ–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –¥–ª—è Binance WebSocket
     *
     * @typedef {Object} BinanceTradeData
     * @property {string} e - –¢–∏–ø —Å–æ–±—ã—Ç–∏—è ('trade')
     * @property {number} E - –í—Ä–µ–º—è —Å–æ–±—ã—Ç–∏—è (timestamp –≤ –º–∏–ª–ª–∏—Å–µ–∫—É–Ω–¥–∞—Ö)
     * @property {string} s - –¢–æ—Ä–≥–æ–≤–∞—è –ø–∞—Ä–∞ ('BTCUSDT')
     * @property {number} t - ID —Å–¥–µ–ª–∫–∏
     * @property {string} p - –¶–µ–Ω–∞ —Å–¥–µ–ª–∫–∏
     * @property {string} q - –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ (–æ–±—ä–µ–º)
     * @property {number} T - –í—Ä–µ–º—è —Å–¥–µ–ª–∫–∏ (timestamp)
     * @property {boolean} m - Maker side (false = –ø–æ–∫—É–ø–∫–∞, true = –ø—Ä–æ–¥–∞–∂–∞)
     * @property {boolean} M - Ignore (–º–æ–∂–Ω–æ –∏–≥–Ω–æ—Ä–∏—Ä–æ–≤–∞—Ç—å)
     *
     * –ü—Ä–∏–º–µ—Ä –¥–∞–Ω–Ω—ã—Ö:
     * {
     *   e: 'trade',
     *   E: 1755613765692,
     *   s: 'BTCUSDT',
     *   t: 5170731426,
     *   p: '114130.01000000',
     *   q: '0.00438000',
     *   T: 1755613765692,
     *   m: false,
     *   M: true
     * }
     */
    getBinanceConfig() {
        return {
            exchangeName: 'Binance',
            route: 'wss://stream.binance.com:9443/ws/btcusdt@trade',
            headers: {
                'User-Agent': 'TradeBot/1.0',
            },
            subscriptions: [],
            onMessage: [
                (data) => {
                    // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Å–¥–µ–ª–∫–∏ —Å—Ä–∞–∑—É –ø–æ –ø—Ä–∏—Ö–æ–¥—É, –Ω–µ –¥–æ–∂–∏–¥–∞—è—Å—å –≤—Å–µ—Ö –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–π
                    this.volumeAnalyzer.processBinanceTrade(data)
                    // console.log('[Binance]', data) // –í—Ä–µ–º–µ–Ω–Ω–æ –æ—Ç–∫–ª—é—á–µ–Ω–æ
                },
            ],
            onConnect: () => {
                console.log('‚úÖ Binance WebSocket –ø–æ–¥–∫–ª—é—á–µ–Ω')
                this.connectionStatus.binance = true
                this.checkAllConnections()
            },
            onError: (error) => {
                console.log(
                    '‚ùå Binance WebSocket –æ—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è:',
                    error.message,
                )
                this.connectionStatus.binance = 'error'
                this.checkAllConnections()
            },
        }
    }

    /**
     * –ü–æ–ª—É—á–µ–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –¥–ª—è Bybit WebSocket
     *
     * @typedef {Object} BybitTradeData
     * @property {string} topic - –ö–∞–Ω–∞–ª –ø–æ–¥–ø–∏—Å–∫–∏ ('publicTrade.BTCUSDT')
     * @property {number} ts - Timestamp —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –º–∏–ª–ª–∏—Å–µ–∫—É–Ω–¥–∞—Ö
     * @property {string} type - –¢–∏–ø –¥–∞–Ω–Ω—ã—Ö ('snapshot' –∏–ª–∏ 'delta')
     * @property {Array<BybitTrade>} data - –ú–∞—Å—Å–∏–≤ —Å–¥–µ–ª–æ–∫
     *
     * @typedef {Object} BybitTrade
     * @property {string} i - ID —Å–¥–µ–ª–∫–∏
     * @property {number} T - Timestamp —Å–¥–µ–ª–∫–∏ –≤ –º–∏–ª–ª–∏—Å–µ–∫—É–Ω–¥–∞—Ö
     * @property {string} p - –¶–µ–Ω–∞ —Å–¥–µ–ª–∫–∏
     * @property {string} v - –û–±—ä–µ–º —Å–¥–µ–ª–∫–∏
     * @property {string} S - –°—Ç–æ—Ä–æ–Ω–∞ —Å–¥–µ–ª–∫–∏ ('Sell' –∏–ª–∏ 'Buy')
     * @property {number} seq - Sequence number
     * @property {string} s - –°–∏–º–≤–æ–ª —Ç–æ—Ä–≥–æ–≤–æ–π –ø–∞—Ä—ã
     * @property {boolean} BT - Block trade flag
     * @property {boolean} RPI - Reduce position indicator
     *
     * –ü—Ä–∏–º–µ—Ä –¥–∞–Ω–Ω—ã—Ö:
     * {
     *   topic: 'publicTrade.BTCUSDT',
     *   ts: 1755613765932,
     *   type: 'snapshot',
     *   data: [{
     *     i: '2290000000879452587',
     *     T: 1755613765931,
     *     p: '114123.9',
     *     v: '0.000215',
     *     S: 'Sell',
     *     seq: 82836106168,
     *     s: 'BTCUSDT',
     *     BT: false,
     *     RPI: false
     *   }]
     * }
     */
    getBybitConfig() {
        return {
            exchangeName: 'Bybit',
            route: 'wss://stream.bybit.com/v5/public/spot',
            headers: {
                'User-Agent': 'TradeBot/1.0',
            },
            subscriptions: [
                {
                    op: 'subscribe',
                    args: ['publicTrade.BTCUSDT'],
                },
            ],
            onMessage: [
                (data) => {
                    if (data.data) {
                        data.data.forEach((trade) => {
                            this.volumeAnalyzer.processBybitTrade(trade)
                        })
                        // console.log('[Bybit]', data) // –í—Ä–µ–º–µ–Ω–Ω–æ –æ—Ç–∫–ª—é—á–µ–Ω–æ
                    }
                },
            ],
            onConnect: () => {
                console.log('‚úÖ Bybit WebSocket –ø–æ–¥–∫–ª—é—á–µ–Ω')
                this.connectionStatus.bybit = true
                this.checkAllConnections()
            },
            onError: (error) => {
                console.log(
                    '‚ùå Bybit WebSocket –æ—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è:',
                    error.message,
                )
                this.connectionStatus.bybit = 'error'
                this.checkAllConnections()
            },
        }
    }

    /**
     * –ü–æ–ª—É—á–µ–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –¥–ª—è Coinbase WebSocket
     *
     * @typedef {Object} CoinbaseData
     * @property {*} [data] - –°—Ç—Ä—É–∫—Ç—É—Ä–∞ –¥–∞–Ω–Ω—ã—Ö –ø–æ–∫–∞ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–∞ (–Ω–µ —É–¥–∞–µ—Ç—Å—è –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è)
     *
     * TODO: –û–±–Ω–æ–≤–∏—Ç—å –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—é –ø–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–≥–æ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Coinbase
     * –û–∂–∏–¥–∞–µ–º—ã–π —Ñ–æ—Ä–º–∞—Ç: ticker –¥–∞–Ω–Ω—ã–µ –¥–ª—è BTC-USD –ø–∞—Ä—ã
     */
    getCoinbaseConfig() {
        return {
            exchangeName: 'Coinbase',
            route: 'wss://ws-feed.pro.coinbase.com',
            headers: {
                'User-Agent': 'TradeBot/1.0',
            },
            subscriptions: [
                {
                    type: 'subscribe',
                    product_ids: ['BTC-USD'],
                    channels: ['ticker'],
                },
            ],
            onMessage: [
                (data) => {
                    // console.log('[Coinbase]', data) // –í—Ä–µ–º–µ–Ω–Ω–æ –æ—Ç–∫–ª—é—á–µ–Ω–æ
                },
            ],
            onConnect: () => {
                console.log('‚úÖ Coinbase WebSocket –ø–æ–¥–∫–ª—é—á–µ–Ω')
                this.connectionStatus.coinbase = true
                this.checkAllConnections()
            },
            onError: (error) => {
                console.log(
                    '‚ùå Coinbase WebSocket –æ—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è:',
                    error.message,
                )
                this.connectionStatus.coinbase = 'error'
                this.checkAllConnections()
            },
        }
    }

    /**
     * –ü—Ä–æ–≤–µ—Ä–∫–∞ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ –≤—Å–µ—Ö –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–π
     */
    checkAllConnections() {
        const allResolved = Object.values(this.connectionStatus).every(
            (status) => status === true || status === 'error',
        )

        if (allResolved && !this.allConnectionsReady) {
            this.allConnectionsReady = true

            // –í—ã–≤–æ–¥–∏–º —Å—Ç–∞—Ç—É—Å –∫–∞–∂–¥–æ–π –±–∏—Ä–∂–∏
            console.log('üìä –°—Ç–∞—Ç—É—Å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–π –∫ –±–∏—Ä–∂–∞–º:')
            Object.entries(this.connectionStatus).forEach(
                ([exchange, status]) => {
                    if (status === true) {
                        console.log(`‚úÖ ${exchange.toUpperCase()}: –ø–æ–¥–∫–ª—é—á–µ–Ω–æ`)
                    } else if (status === 'error') {
                        console.log(
                            `‚ùå ${exchange.toUpperCase()}: –æ—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è`,
                        )
                    }
                },
            )

            console.log('üéØ –í—Å–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω—ã, –Ω–∞—á–∏–Ω–∞–µ–º –≤—ã–≤–æ–¥ –¥–∞–Ω–Ω—ã—Ö')
        }
    }

    /**
     * –ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–π WebSocket
     */
    getAllConfigs() {
        return [
            this.getBinanceConfig(),
            this.getBybitConfig(),
            this.getCoinbaseConfig(),
        ]
    }
}
