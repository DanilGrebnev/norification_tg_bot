import { Bot } from 'grammy'

/** –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Telegram –±–æ—Ç—É */
export async function connectToTgBot(options = {}, successCallback) {
    return new Promise(async (resolve, reject) => {
        try {
            const { token } = options

            if (!token) {
                throw new Error('Telegram bot token –Ω–µ —É–∫–∞–∑–∞–Ω')
            }

            console.log('[TgBot] –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Telegram –±–æ—Ç—É...')

            // –°–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä –±–æ—Ç–∞
            const bot = new Bot(token)

            // –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
            setupBotHandlers(bot)

            // –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –±–æ—Ç–µ
            const botInfo = await bot.api.getMe()
            console.log(`[TgBot] –ë–æ—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω: @${botInfo.username}`)

            // –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞ –≤ –Ω–µ–±–ª–æ–∫–∏—Ä—É—é—â–µ–º —Ä–µ–∂–∏–º–µ
            bot.start()
            // –î–∞–µ–º –Ω–µ–±–æ–ª—å—à—É—é –∑–∞–¥–µ—Ä–∂–∫—É –¥–ª—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –±–æ—Ç–∞
            setTimeout(() => {
                resolve(bot)
            }, 500)
            successCallback?.()
        } catch (error) {
            console.error('[TgBot] –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–æ—Ç—É:', error.message)
            reject(error)
        }
    })
}

/** –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –∫–æ–º–∞–Ω–¥ –∏ —Å–æ–æ–±—â–µ–Ω–∏–π –±–æ—Ç–∞ */
function setupBotHandlers(bot) {
    // –ö–æ–º–∞–Ω–¥–∞ /start
    bot.command('start', async (ctx) => {
        const welcomeMessage = `
üéâ <b>–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ TradeBot!</b>

–Ø –±—É–¥—É —É–≤–µ–¥–æ–º–ª—è—Ç—å –≤–∞—Å –æ–± –æ–±—ä–µ–º–∞—Ö –ø–æ–∫—É–ø–æ–∫ –∏ –ø—Ä–æ–¥–∞–∂ Bitcoin.

<b>‚è∞ –í—ã–±–µ—Ä–∏—Ç–µ –∏–Ω—Ç–µ—Ä–≤–∞–ª –ø–æ–¥–ø–∏—Å–∫–∏:</b>
        `

        await ctx.reply(welcomeMessage, {
            parse_mode: 'HTML',
            reply_markup: getSubscriptionKeyboard(),
        })
    })

    // –ö–æ–º–∞–Ω–¥–∞ /help
    bot.command('help', async (ctx) => {
        const helpMessage = `
üìö <b>–°–ø—Ä–∞–≤–∫–∞ TradeBot</b>

<b>–ö–æ–º–∞–Ω–¥—ã:</b>
/start - –ó–∞–ø—É—Å–∫ –∏ –≤—ã–±–æ—Ä –∏–Ω—Ç–µ—Ä–≤–∞–ª–∞
/help - –≠—Ç–∞ —Å–ø—Ä–∞–≤–∫–∞

<b>–ö–∞–∫ —Ä–∞–±–æ—Ç–∞–µ—Ç:</b>
‚Ä¢ –í—ã–±–µ—Ä–∏—Ç–µ –∏–Ω—Ç–µ—Ä–≤–∞–ª —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
‚Ä¢ –ü–æ–ª—É—á–∞–π—Ç–µ –¥–∞–Ω–Ω—ã–µ –æ–± –æ–±—ä–µ–º–∞—Ö Bitcoin
‚Ä¢ –û—Ç—Å–ª–µ–∂–∏–≤–∞–π—Ç–µ –¥–æ–º–∏–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–∫—É–ø–æ–∫/–ø—Ä–æ–¥–∞–∂
        `

        await ctx.reply(helpMessage, {
            parse_mode: 'HTML',
        })
    })

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ callback –∫–Ω–æ–ø–æ–∫
    bot.on('callback_query', async (ctx) => {
        const data = ctx.callbackQuery.data

        if (data.startsWith('sub_')) {
            await handleSubscription(ctx, data)
        }

        await ctx.answerCallbackQuery()
    })

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
    bot.on('message:text', async (ctx) => {
        await ctx.reply('–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ–¥–ø–∏—Å–æ–∫')
    })

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫
    bot.catch((err) => {
        console.error('[TgBot] –û—à–∏–±–∫–∞:', err)
    })
}

/** –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–¥–ø–∏—Å–æ–∫ –Ω–∞ –∏–Ω—Ç–µ—Ä–≤–∞–ª—ã */
async function handleSubscription(ctx, data) {
    try {
        // –ò–∑–≤–ª–µ–∫–∞–µ–º –∏–Ω—Ç–µ—Ä–≤–∞–ª –∏–∑ callback data (–Ω–∞–ø—Ä–∏–º–µ—Ä, sub_30s -> 30)
        const intervalMatch = data.match(/sub_(\d+)([smh])/)
        if (!intervalMatch) {
            await ctx.answerCallbackQuery('‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∏–Ω—Ç–µ—Ä–≤–∞–ª–∞')
            return
        }

        const value = parseInt(intervalMatch[1])
        const unit = intervalMatch[2]

        let seconds
        switch (unit) {
            case 's':
                seconds = value
                break
            case 'm':
                seconds = value * 60
                break
            case 'h':
                seconds = value * 3600
                break
            default:
                seconds = value
        }

        const intervalName = formatInterval(seconds)

        await ctx.editMessageText(
            `‚úÖ <b>–ü–æ–¥–ø–∏—Å–∫–∞ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞!</b>\n\n–í—ã –±—É–¥–µ—Ç–µ –ø–æ–ª—É—á–∞—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ–± –æ–±—ä–µ–º–∞—Ö Bitcoin –∫–∞–∂–¥—ã–µ ${intervalName}.\n\nüü¢ –ó–µ–ª–µ–Ω—ã–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è = –¥–æ–º–∏–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–∫—É–ø–æ–∫\nüî¥ –ö—Ä–∞—Å–Ω—ã–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è = –¥–æ–º–∏–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–æ–¥–∞–∂`,
            { parse_mode: 'HTML' },
        )

        console.log(
            `[TgBot] –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${ctx.from.id} –ø–æ–¥–ø–∏—Å–∞–ª—Å—è –Ω–∞ ${intervalName}`,
        )
    } catch (error) {
        console.error('[TgBot] –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø–æ–¥–ø–∏—Å–∫–∏:', error)
        await ctx.answerCallbackQuery('‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–ø–∏—Å–∫–∏')
    }
}

/** –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –≤—ã–±–æ—Ä–∞ –∏–Ω—Ç–µ—Ä–≤–∞–ª–æ–≤ */
function getSubscriptionKeyboard() {
    const { InlineKeyboard } = require('grammy')

    return new InlineKeyboard()
        .text('‚è±Ô∏è 30 —Å–µ–∫—É–Ω–¥', 'sub_30s')
        .text('üìä 1 –º–∏–Ω—É—Ç–∞', 'sub_1m')
        .row()
        .text('üìà 5 –º–∏–Ω—É—Ç', 'sub_5m')
        .text('üïê 15 –º–∏–Ω—É—Ç', 'sub_15m')
        .row()
        .text('üïï 30 –º–∏–Ω—É—Ç', 'sub_30m')
        .text('üïê 1 —á–∞—Å', 'sub_1h')
}

/** –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –∏–Ω—Ç–µ—Ä–≤–∞–ª –≤ —á–∏—Ç–∞–µ–º—ã–π –≤–∏–¥ */
function formatInterval(seconds) {
    if (seconds < 60) {
        return `${seconds} —Å–µ–∫—É–Ω–¥`
    } else if (seconds < 3600) {
        const minutes = Math.floor(seconds / 60)
        return `${minutes} –º–∏–Ω—É—Ç`
    } else {
        const hours = Math.floor(seconds / 3600)
        return `${hours} —á–∞—Å`
    }
}
